# -*- coding: utf-8 -*-
"""AnalyzeAudiencesLLM_openai.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i_0uIxloQbXd1TSFAPXOwSYWFO3GlWAi

# Audience Creation Using LLMs
"""

# pip install openai==0.28

# import necessary libraries
import pandas as pd
import numpy as np
import openai

openai.api_key = "***"

"""## Preprocessing before using LLMs"""

# import clean dataframe with customer information
path = '/Users/ilaydabekircan/Documents/Vision_Bridge/DS_Assignment/py_files'

csv_files = [file for file in os.listdir(path) if file.startswith('df_segment')]

for file in csv_files:
    df_name = file.split('.')[0]
    globals()[df_name] = pd.read_csv(os.path.join(path, file))


df_segment.head(3)

df_segment.info()

# estimate the percentage of customer who purchased for each segment
purchase_percentage = df_segment[['PurchaseFlag', 'Segment']].groupby('Segment').agg({
    'PurchaseFlag': ['mean']
}).reset_index()

purchase_percentage.columns = [
    'Segment',
    'PurchasePercentage'
]

purchase_percentage

"""The dataframe contains object-typed columns with long string values. For example, the 'Gender' column has categories like 'female' and 'male' instead of 'f' and 'm'. When dealing with longer strings, the token count increases in the LLM model, which can push us closer to the maximum token limit. To address this, we created dictionaries for object-typed columns and abbreviated each category to reduce the number of tokens."""

state_dict = {
    "Alabama": "AL",
    "Alaska": "AK",
    "Arizona": "AZ",
    "Arkansas": "AR",
    "California": "CA",
    "Colorado": "CO",
    "Connecticut": "CT",
    "Delaware": "DE",
    "Florida": "FL",
    "Georgia": "GA",
    "Hawaii": "HI",
    "Idaho": "ID",
    "Illinois": "IL",
    "Indiana": "IN",
    "Iowa": "IA",
    "Kansas": "KS",
    "Kentucky": "KY",
    "Louisiana": "LA",
    "Maine": "ME",
    "Maryland": "MD",
    "Massachusetts": "MA",
    "Michigan": "MI",
    "Minnesota": "MN",
    "Mississippi": "MS",
    "Missouri": "MO",
    "Montana": "MT",
    "Nebraska": "NE",
    "Nevada": "NV",
    "New Hampshire": "NH",
    "New Jersey": "NJ",
    "New Mexico": "NM",
    "New York": "NY",
    "North Carolina": "NC",
    "North Dakota": "ND",
    "Ohio": "OH",
    "Oklahoma": "OK",
    "Oregon": "OR",
    "Pennsylvania": "PA",
    "Rhode Island": "RI",
    "South Carolina": "SC",
    "South Dakota": "SD",
    "Tennessee": "TN",
    "Texas": "TX",
    "Utah": "UT",
    "Vermont": "VT",
    "Virginia": "VA",
    "Washington": "WA",
    "West Virginia": "WV",
    "Wisconsin": "WI",
    "Wyoming": "WY"
}

age_dict = {
    '5 to 17 years': '5-17',
    '18 to 24 years': '18-24',
    '25 to 34 years': '25-34',
    '35 to 44 years': '35-44',
    '45 to 54 years': '45-54',
    '55 to 64 years': '55-64',
    '65 to 74 years': '65-74',
    '75 years and over': '75+'
}

education_abb = {
    'less_than_high_school_diploma': '< HS Diploma',
    'some_college_or_associates_degree': 'College/Associates',
    'high_school_graduate': 'HS Graduate',
    'bachelors_degree': 'Bachelors',
    'graduate_or_professional_degree': 'Graduate/Professional'
}

occupation_abb = {
    'Unknown': 'Un',
    'management_business_science_arts': 'Management/Business/Arts',
    'sales_and_office_occupations': 'Sales/Office',
    'service_occupations': 'Service',
    'production_transportation_material_moving': 'Production/Transport',
    'natural_resources_construction_maintenance': 'Resources/Construction'
}

industry_abb = {
    'Unknown': 'Un',
    'educational_services_health_care_social_assistance': 'Edu/Health/Social',
    'professional_scientific_management': 'Prof/Sci/Mgmt',
    'arts_entertainment_recreation_accommodation_food_services': 'Arts/Ent/Rec/Food',
    'retail_trade': 'Retail',
    'finance_insurance_real_estate': 'Finance/Ins/RE',
    'manufacturing': 'Manufacturing',
    'other_services': 'Other Services',
    'construction': 'Construction',
    'public_administration': 'Public Admin',
    'transportation_warehousing_utilities': 'Trans/Warehousing/Util',
    'wholesale_trade': 'Wholesale',
    'information': 'Information',
    'agriculture_forestry_fishing_mining': 'Agric/Forestry/Fish/Mine'
}

city_abb = {
    'Jacksonville city': 'Jacksonville',
    'Charlotte city': 'Charlotte',
    'Nashville-Davidson metropolitan government (balance)': 'Nashville',
    'San Antonio city': 'San Antonio',
    'Seattle city': 'Seattle',
    'Tucson city': 'Tucson',
    'Fresno city': 'Fresno',
    'Phoenix city': 'Phoenix',
    'Columbus city': 'Columbus',
    'Las Vegas city': 'Las Vegas',
    'Detroit city': 'Detroit',
    'Memphis city': 'Memphis',
    'Washington city': 'Washington',
    'Dallas city': 'Dallas',
    'San Francisco city': 'San Francisco',
    'Austin city': 'Austin',
    'Denver city': 'Denver',
    'Philadelphia city': 'Philadelphia',
    'Louisville/Jefferson County metro government (balance)': 'Louisville',
    'San Diego city': 'San Diego',
    'Oklahoma City city': 'Oklahoma City',
    'El Paso city': 'El Paso',
    'Albuquerque city': 'Albuquerque',
    'Portland city': 'Portland',
    'Boston city': 'Boston',
    'Houston city': 'Houston',
    'New York city': 'New York',
    'Milwaukee city': 'Milwaukee',
    'Fort Worth city': 'Fort Worth',
    'San Jose city': 'San Jose',
    'Los Angeles city': 'Los Angeles',
    'Indianapolis city (balance)': 'Indianapolis',
    'Baltimore city': 'Baltimore',
    'Chicago city': 'Chicago'
}

category_abb = {
    'Unknown': 'Un',
    'accessories': 'Accs',
    'home & kitchen': 'Home & Kit',
    'beauty & health': 'Beauty & Hlth',
    'bags & luggage': 'Bags & Lug',
    'appliances': 'Applncs',
    'sports & fitness': 'Sports & Fit',
    'car & motorbike': 'Car & Moto',
    'tv audio & cameras': 'TV & Audio',
    'kids\' fashion': 'Kids\' Fash',
    'toys & baby products': 'Toys & Baby',
    'industrial supplies': 'Indus Supplies',
    'grocery & gourmet foods': 'Groc & Gourmet',
    'stores': 'Stores',
    'men\'s shoes': 'Men\'s Shoes',
    'men\'s clothing': 'Men\'s Cloth',
    'women\'s clothing': 'Women\'s Cloth',
    'pet supplies': 'Pet Suppl',
    'home kitchen pets': 'Home Kit Pets',
    'music': 'Music',
    'women\'s shoes': 'Women\'s Shoes'
}

subcat_abb = {
    'Unknown': 'Un',
    'All Exercise & Fitness': 'Exercise & Fit',
    'Casual Shoes': 'Casual Shoes',
    'All Electronics': 'Electronics',
    'Badminton': 'Badminton',
    'All Appliances': 'Appliances',
    'All Pet Supplies': 'Pet Supplies',
    'Baby Products': 'Baby Prod',
    'All Grocery & Gourmet Foods': 'Groc & Gourmet',
    'Clothing': 'Clothing',
    'Air Conditioners': 'Air Cond',
    'Bedroom Linen': 'Bed Linen',
    'Amazon Fashion': 'Amazon Fash',
    'Car & Bike Care': 'Car & Bike Care',
    'Ethnic Wear': 'Ethnic Wear',
    'All Home & Kitchen': 'Home & Kit',
    'Car Electronics': 'Car Electronics',
    'Bags & Luggage': 'Bags & Lug',
    'All Car & Motorbike Products': 'Car & Moto',
    'Baby Fashion': 'Baby Fashion',
    'All Sports Fitness & Outdoors': 'Sports & Outdoor',
    'Cameras': 'Cameras',
    'Ballerinas': 'Ballerinas',
    'Diet & Nutrition': 'Diet & Nut',
    'Beauty & Grooming': 'Beauty & Groom',
    'Indoor Lighting': 'Indoor Light',
    'Camera Accessories': 'Cam Accs',
    'Formal Shoes': 'Formal Shoes',
    'Cricket': 'Cricket',
    'Camping & Hiking': 'Camping & Hike',
    'STEM Toys Store': 'STEM Toys',
    'Industrial & Scientific Supplies': 'Indus & Sci Supplies',
    'Gold & Diamond Jewellery': 'Gold & Diamond',
    'Cardio Equipment': 'Cardio Equip',
    'Car Parts': 'Car Parts',
    'Strength Training': 'Strength Train',
    'Garden & Outdoors': 'Garden & Outdrs',
    'Football': 'Football',
    'Coffee Tea & Beverages': 'Coffee & Tea',
    'Lingerie & Nightwear': 'Lingerie & Night',
    'Home Audio & Theater': 'Home Audio & Thea',
    'Diapers': 'Diapers',
    'Home Entertainment Systems': 'Home Ent Sys',
    'Headphones': 'Headphones',
    'Heating & Cooling Appliances': 'Heat & Cool Appl',
    'Baby Bath Skin & Grooming': 'Baby Bath & Groom',
    'Speakers': 'Speakers',
    'Backpacks': 'Backpacks',
    'Fashion & Silver Jewellery': 'Fashion & Silver',
    'Kids\' Fashion': 'Kids\' Fash',
    'Kitchen Storage & Containers': 'Kit Storage & Cont',
    'Health & Personal Care': 'Health & Care',
    'Home Improvement': 'Home Improv',
    'School Bags': 'School Bags',
    'Wallets': 'Wallet',
    'Cycling': 'Cycling',
    'Furniture': 'Furniture',
    'Shirts': 'Shirts',
    'Car Accessories': 'Car Accs',
    'Televisions': 'TVs',
    'Kids\' Watches': 'Kids\' Watches',
    'Men\'s Fashion': 'Men\'s Fash',
    'Washing Machines': 'Washing Mach',
    'Fashion Sandals': 'Fashion Sandals',
    'Janitorial & Sanitation Supplies': 'Janitorial & San Sup',
    'Dog supplies': 'Dog Supplies',
    'Snack Foods': 'Snack Foods',
    'International Toy Store': 'Intl Toy Store',
    'Security Cameras': 'Sec Cameras',
    'Handbags & Clutches': 'Handbags & Clutch',
    'Fitness Accessories': 'Fit Accs',
    'Running': 'Running',
    'Home Furnishing': 'Home Furnish',
    'Travel Duffles': 'Travel Duff',
    'Fashion Sales & Deals': 'Fashion Sales',
    'Test Measure & Inspect': 'Test & Inspect',
    'Motorbike Accessories & Parts': 'Moto Accs & Parts',
    'Musical Instruments & Professional Audio': 'Musical & Pro Audio',
    'Home Décor': 'Home Décor',
    'Jewellery': 'Jewelry',
    'Toys Gifting Store': 'Toys Gift Store',
    'Refurbished & Open Box': 'Refurb & Open Box',
    'Home Storage': 'Home Storage',
    'Watches': 'Watches',
    'Sunglasses': 'Sunglasses',
    'Household Supplies': 'Household Sup',
    'Personal Care Appliances': 'Pers Care Appl',
    'Nursing & Feeding': 'Nursing & Feed',
    'Strollers & Prams': 'Strollers & Prams',
    'Make-up': 'Make-up',
    'Lab & Scientific': 'Lab & Sci',
    'Women\'s Fashion': 'Women\'s Fash',
    'Yoga': 'Yoga',
    'Western Wear': 'Western Wear',
    'Innerwear': 'Innerwear',
    'Sports Shoes': 'Sports Shoes',
    'Luxury Beauty': 'Lux Beauty',
    'Travel Accessories': 'Travel Accs',
    'The Designer Boutique': 'Designer Boutique',
    'Rucksacks': 'Rucksacks',
    'Jeans': 'Jeans',
    'Kitchen & Dining': 'Kit & Dining',
    'Sewing & Craft Supplies': 'Sewing & Craft',
    'Kids\' Shoes': 'Kids\' Shoes',
    'Sportswear': 'Sportswear',
    'Kitchen & Home Appliances': 'Kit & Home Appl',
    'Value Bazaar': 'Value Bazaar',
    'Kids\' Clothing': 'Kids\' Cloth',
    'Suitcases & Trolley Bags': 'Suitcases & Trolley',
    'Toys & Games': 'Toys & Games',
    'Refrigerators': 'Fridges',
    'T-shirts & Polos': 'T-shirts & Polos',
    'Shoes': 'Shoes'
}

df_segment['CustomerCity'] = df_segment['CustomerCity'].map(city_abb)
df_segment['CustomerState'] = df_segment['CustomerState'].map(state_dict)
df_segment['Gender'] = df_segment['Gender'].replace({'female': 'f','male': 'm'})
df_segment['Age'] = df_segment['Age'].map(age_dict)
df_segment['EmploymentStatus'] = df_segment['EmploymentStatus'].replace({'employed': 1,'unemployed': 0})
df_segment['Education'] = df_segment['Education'].map(education_abb)
df_segment['Occupation'] = df_segment['Occupation'].map(occupation_abb)
df_segment['Industry'] = df_segment['Industry'].map(industry_abb)
df_segment['MainCategoryMode'] = df_segment['MainCategoryMode'].map(category_abb)
df_segment['SubCategoryMode'] = df_segment['SubCategoryMode'].map(subcat_abb)

df_segment.head(3)

"""Since LLMs can understand text data, we transformed the dataframes to csv files to later use in the models."""

# transform dfs to csv
df_str = df_segment.to_csv(index = False)
purchase_percentage_str = purchase_percentage.to_csv(index = False)

"""Although LLMs can analyze the dataset as a whole, when we put this df we exceed the max_token limit. Therefore, we will split the dataframe into three to store the information for each segment separately."""

segments = df_segment['Segment'].unique()

# hold dfs for each segment
segmented_dfs = {}

# create df for each segment
for segment in segments:
    segmented_dfs[segment] = df_segment[df_segment['Segment'] == segment]

# name the segments with their segment numbers and transform into csv
for i in range(1, len(segments)+1):
  globals()[f'df{i}'] = segmented_dfs[i]
  globals()[f'df{i}_str'] = segmented_dfs[i].to_csv(index=False)

df1_str

prompt_df1 = f"""
Analyze the following customer data for Segment 1. Categorize customers into distinct audience segments based on behavior, preferences, and demographics.
For this segment, provide a brief description of key characteristics and suggest targeted marketing strategies to enhance engagement and sales.

Data:
{df1_str}
"""

prompt_df3 = f"""
Analyze the following customer data for Segment 3. Categorize customers into distinct audience segments based on behavior, preferences, and demographics.
For this segment, provide a brief description of key characteristics and suggest targeted marketing strategies to enhance engagement and sales.

Data:
{df3_str}
"""

response_df1 = openai.ChatCompletion.create(
    model="gpt-4o-mini",
    messages=[
        {"role": "user", "content": prompt_df1}
    ],
    max_tokens = 750,
    temperature = 0.7
)

print("Analysis for Segment 1:")
print(response_df1.choices[0].message['content'].strip())

response_df3 = openai.ChatCompletion.create(
    model="gpt-4o-mini",
    messages=[
        {"role": "user", "content": prompt_df3}
    ],
    max_tokens = 750,
    temperature = 0.7
)

print("Analysis for Segment 3:")
print(response_df3.choices[0].message['content'].strip())

"""Since the second segment has more customer comparing to others, it can't be fit in the model without splitting. Therefore, we randomly split df2 and read the outputs separately."""

df2_v1 = df2.sample(frac = 0.5,
                    random_state = 42)
df2_v2 = df2.drop(df2_v1.index)

prompt_df2_v1 = f"""
Analyze the following customer data for Segment 2. Categorize customers into distinct audience segments based on behavior, preferences, and demographics.
For this segment, provide a brief description of key characteristics and suggest targeted marketing strategies to enhance engagement and sales.

Data:
{df2_v1}
"""

prompt_df2_v2 = f"""
Analyze the following customer data for Segment 2. Categorize customers into distinct audience segments based on behavior, preferences, and demographics.
For this segment, provide a brief description of key characteristics and suggest targeted marketing strategies to enhance engagement and sales.

Data:
{df2_v2}
"""

response_df2 = openai.ChatCompletion.create(
    model = "gpt-4o-mini",
    messages=[
        {"role": "user", "content": prompt_df2_v1}
    ],
    max_tokens = 750,
    temperature = 0.7
)

print("Analysis for Segment 2 Version 1:")
print(response_df2.choices[0].message['content'].strip())

response_df2 = openai.ChatCompletion.create(
    model = "gpt-4o-mini",
    messages=[
        {"role": "user", "content": prompt_df2_v2}
    ],
    max_tokens = 750,
    temperature = 0.7
)

print("Analysis for Segment 2:")
print(response_df2.choices[0].message['content'].strip())

"""### The effectiveness of using LLMs for this purpose

*   LLMs can process large datasets quickly and efficiently. This speeds up the process of creating audience segments and recommendations.
*   They are adaptable for mixed-datatypes and can understand the information as long as the column name and values are consistent.
*   Rather than only giving analysis, they can also give recommendations.

*   It can be computationally expensive for large datasets.
*   Limitation of the token limit restricts the amount of data we can pass in a single request. Compressing a df to fit it may cause reducing the granularity of analysis.
*   LLMs function as black boxes, making it hard to explain how certain analysis suggestions were made. I tried Gemini for this project before but the analysis output was not sufficient. It is important to select the correct engine for each task.


**Conclusion:** LLMs offer quick and efficient audience segmentation, adapt to mixed data types, and provide actionable recommendations. However, they can be computationally expensive, limited by token constraints, and lack transparency in how their suggestions are generated.
"""